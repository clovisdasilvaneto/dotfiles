# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Show git stats in a repo from specific user name
function gitwho() {
    git log --shortstat --author="$@*" | grep -E "fil(e|es) changed" | awk '{files+=$1; inserted+=$4; deleted+=$6} END {print "files changed: ", files, "lines inserted: ", inserted, "lines deleted: ", deleted }'
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	)

	local cmd=""
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar using \`${cmd}\`…"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"
	echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Use Git’s colored diff when available
#hash git &>/dev/null
#if [ $? -eq 0 ]; then
#	function diff() {
#		git diff --no-index --color-words "$@"
#	}
#fi

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`"
		return 1
	fi
	curl -i http://git.io/ -F "url=${2}" -F "code=${1}"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en1)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# return mdf of a string
function md5str() {
	echo -n "$@" | md5
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Install Grunt plugins and add them as `devDependencies` to `package.json`
# Usage: `gi contrib-watch contrib-uglify zopfli`
function gi() {
	local IFS=,
	eval npm install --save-dev grunt-{"$*"}
}

# brew cask install
function installcask() {
	brew cask install "${@}" 2> /dev/null
}

# anybar - https://github.com/tonsky/AnyBar
function anybar {
	echo -n $1 | nc -4u -w0 localhost ${2:-1738};
}

# lmk
function lmk() {
	eval $*
	osascript -e "display notification \"$*\" with title \"$*\""
}

video-url-from-tweet() {
		if [ "$1" ]; then
				url=$1
		else
				echo "Must provide a url"
				return 1
		fi

		curl --silent $url |\
				# should find the <meta> tag with content="<thumbnail url>"
				(grep -m1 "tweet_video_thumb" ||\
					echo "Could not find video" && return 1) |\

				# from: <meta property="og:image" content="https://pbs.twimg.com/tweet_video_thumb/xxxxxxxxxx.jpg">
				# to: https://pbs.twimg.com/tweet_video_thumb/xxxxxxxxxx.jpg
				cut -d '"' -f 4 |\

				# from: https://pbs.twimg.com/tweet_video_thumb/xxxxxxxxxx.jpg
				# to: https://video.twimg.com/tweet_video/xxxxxxxxxx.mp4
				sed 's/.jpg/.mp4/g' |\
				sed 's/pbs.twimg.com\/tweet_video_thumb/video.twimg.com\/tweet_video/g'
}
video-from-tweet() {
		if [ "$1" ]; then
				url=$1
		else
				echo "Must provide a url"
				return 1
		fi
		curl $(video-url-from-tweet $url)
}
video-to-gif() {
		# derived from https://engineering.giphy.com/how-to-make-gifs-with-ffmpeg/
		if [ "$2" ]; then
				input=$1
				output=$2
		else
				echo "Must provide an input file and output file"
				return 1
		fi

		ffmpeg -i $input \
					 -filter_complex "[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse" \
					 -f gif \
					 $output
}
gif-from-tweet() {
		if [ "$2" ]; then
				url=$1
				output=$2
		else
				echo "Must provide a url and an output filename"
				return 1
		fi
		video-from-tweet $url | video-to-gif - $output
}

## update systems
#function updatesys() {
#if [ -z $1 ]
#		then
#		if [ "$OS" == "Darwin" ]
#			then
#			echo "Updating…"
#			brew update
#			echo "Upgrading…"
#			brew upgrade
#		else
#			sudo apt-get update
#			sudo apt-get -u upgrade
#		fi
#	else
#		ssh $1 -t sudo apt-get update
#		local dummy
#		ssh $1 -t sudo apt-get --no-act upgrade
#		echo -n "Process the upgrade ?"
#		read -q dummy
#		if [[ $dummy = "y" ]]
#			then
#			ssh $1 -t sudo apt-get -u upgrade --yes
#		fi
#	fi
#}
